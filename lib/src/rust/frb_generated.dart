// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/amazon_parser.dart';
import 'api/apin.dart';
import 'api/browser_service_manager.dart';
import 'api/database.dart';
import 'api/flipkart_parser.dart';
import 'api/models.dart';
import 'api/price_engine.dart';
import 'api/scraper_engine.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -2049072296;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_palert',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<BrowserEngineStatus>
      crateApiScraperEngineBrowserEngineCheckServiceStatus(
          {required BrowserEngine that});

  Future<void> crateApiScraperEngineBrowserEngineCloseCurrentTab(
      {required BrowserEngine that});

  Future<int> crateApiScraperEngineBrowserEngineGetCurrentPort(
      {required BrowserEngine that});

  Future<String> crateApiScraperEngineBrowserEngineGetPageSource(
      {required BrowserEngine that, required String url});

  Future<BrowserEngine> crateApiScraperEngineBrowserEngineNew(
      {required int port,
      required String browserPath,
      required String driverPath});

  Future<(BrowserEngine, ServiceStatus)>
      crateApiScraperEngineBrowserEngineNewWithFallback(
          {required int initialPort,
          required String browserPath,
          required String driverPath});

  Future<ServiceStatus> crateApiScraperEngineBrowserEngineRestartWithFallback(
      {required BrowserEngine that});

  Future<ServiceStatus>
      crateApiBrowserServiceManagerBrowserServiceManagerCheckServiceHealth(
          {required BrowserServiceManager that});

  Future<int>
      crateApiBrowserServiceManagerBrowserServiceManagerFindAvailablePort(
          {required BrowserServiceManager that});

  Future<int> crateApiBrowserServiceManagerBrowserServiceManagerGetCurrentPort(
      {required BrowserServiceManager that});

  Future<bool>
      crateApiBrowserServiceManagerBrowserServiceManagerIsPortAvailable(
          {required int port});

  Future<BrowserServiceManager>
      crateApiBrowserServiceManagerBrowserServiceManagerNew(
          {required int initialPort,
          required String driverPath,
          required String browserPath});

  Future<ServiceStatus>
      crateApiBrowserServiceManagerBrowserServiceManagerRestartService(
          {required BrowserServiceManager that});

  Future<void> crateApiBrowserServiceManagerBrowserServiceManagerSetPortRange(
      {required BrowserServiceManager that,
      required int minPort,
      required int maxPort});

  Future<ServiceStatus>
      crateApiBrowserServiceManagerBrowserServiceManagerStartService(
          {required BrowserServiceManager that});

  Future<void> crateApiBrowserServiceManagerBrowserServiceManagerStopService(
      {required BrowserServiceManager that});

  Future<void> crateApiDatabaseDatabaseCreateBackup(
      {required Database that, required String backupPath});

  Future<List<ProductRecord>> crateApiDatabaseDatabaseGetAllProductsWithHistory(
      {required Database that});

  Future<ProductRecord?> crateApiDatabaseDatabaseGetProductWithHistory(
      {required Database that, required String productId});

  Future<void> crateApiDatabaseDatabaseInsertPriceEntry(
      {required Database that, required ProductDetails details});

  Future<Database> crateApiDatabaseDatabaseNew({required String dbPath});

  Future<void> crateApiDatabaseDatabaseRemoveProduct(
      {required Database that, required String productId});

  Future<void> crateApiDatabaseDatabaseRestoreFromBackup(
      {required Database that,
      required String backupPath,
      required bool replaceExisting});

  Future<void> crateApiDatabaseDatabaseUpsertProduct(
      {required Database that, required ProductDetails details});

  Future<PriceEngineStatus> crateApiPriceEnginePriceEngineCheckServiceStatus(
      {required PriceEngine that});

  Future<void> crateApiPriceEnginePriceEngineCreateBackup(
      {required PriceEngine that, required String backupPath});

  Future<ProductRecord> crateApiPriceEnginePriceEngineFetchAndUpdateProduct(
      {required PriceEngine that, required String url});

  Future<List<ProductRecord>> crateApiPriceEnginePriceEngineGetAllProductsInDb(
      {required PriceEngine that});

  Future<int> crateApiPriceEnginePriceEngineGetCurrentPort(
      {required PriceEngine that});

  Future<PriceEngine> crateApiPriceEnginePriceEngineNew(
      {required int port,
      required String browserPath,
      required String dbPath,
      required String driverPath});

  Future<void> crateApiPriceEnginePriceEngineRemoveProductById(
      {required PriceEngine that, required String productId});

  Future<ServiceStatus> crateApiPriceEnginePriceEngineRestartBrowserService(
      {required PriceEngine that});

  Future<void> crateApiPriceEnginePriceEngineRestoreFromBackup(
      {required PriceEngine that,
      required String backupPath,
      required bool replaceExisting});

  Future<void> crateApiPriceEnginePriceEngineShutdown(
      {required PriceEngine that});

  List<String> crateApiModelsProductDetailsAutoAccessorGetFeatures(
      {required ProductDetails that});

  String crateApiModelsProductDetailsAutoAccessorGetId(
      {required ProductDetails that});

  List<String> crateApiModelsProductDetailsAutoAccessorGetImages(
      {required ProductDetails that});

  bool crateApiModelsProductDetailsAutoAccessorGetInStock(
      {required ProductDetails that});

  int? crateApiModelsProductDetailsAutoAccessorGetPrice(
      {required ProductDetails that});

  String crateApiModelsProductDetailsAutoAccessorGetRating(
      {required ProductDetails that});

  String? crateApiModelsProductDetailsAutoAccessorGetSeller(
      {required ProductDetails that});

  String crateApiModelsProductDetailsAutoAccessorGetSite(
      {required ProductDetails that});

  Value crateApiModelsProductDetailsAutoAccessorGetSpecifications(
      {required ProductDetails that});

  String crateApiModelsProductDetailsAutoAccessorGetTitle(
      {required ProductDetails that});

  String crateApiModelsProductDetailsAutoAccessorGetUrl(
      {required ProductDetails that});

  void crateApiModelsProductDetailsAutoAccessorSetFeatures(
      {required ProductDetails that, required List<String> features});

  void crateApiModelsProductDetailsAutoAccessorSetId(
      {required ProductDetails that, required String id});

  void crateApiModelsProductDetailsAutoAccessorSetImages(
      {required ProductDetails that, required List<String> images});

  void crateApiModelsProductDetailsAutoAccessorSetInStock(
      {required ProductDetails that, required bool inStock});

  void crateApiModelsProductDetailsAutoAccessorSetPrice(
      {required ProductDetails that, int? price});

  void crateApiModelsProductDetailsAutoAccessorSetRating(
      {required ProductDetails that, required String rating});

  void crateApiModelsProductDetailsAutoAccessorSetSeller(
      {required ProductDetails that, String? seller});

  void crateApiModelsProductDetailsAutoAccessorSetSite(
      {required ProductDetails that, required String site});

  void crateApiModelsProductDetailsAutoAccessorSetSpecifications(
      {required ProductDetails that, required Value specifications});

  void crateApiModelsProductDetailsAutoAccessorSetTitle(
      {required ProductDetails that, required String title});

  void crateApiModelsProductDetailsAutoAccessorSetUrl(
      {required ProductDetails that, required String url});

  Future<PriceEngineStatus> crateApiApinCheckServiceStatus(
      {required PriceEngine engine});

  Future<void> crateApiApinCreateBackup(
      {required PriceEngine engine, required String backupPath});

  Future<ProductDetails> crateApiAmazonParserExtractDetails(
      {required String htmlSource, required String url});

  Future<ProductDetails> crateApiFlipkartParserExtractDetails(
      {required String htmlSource, required String url});

  Future<ProductRecord> crateApiApinFetchAndUpdateProduct(
      {required PriceEngine engine, required String url});

  Future<List<ProductRecord>> crateApiApinGetAllProductsInDb(
      {required PriceEngine engine});

  Future<int> crateApiApinGetCurrentPort({required PriceEngine engine});

  Future<PriceEngine> crateApiApinGetPriceEngine(
      {required int port,
      required String browserPath,
      required String dbPath,
      required String driverPath});

  Future<void> crateApiApinRemoveProductById(
      {required PriceEngine engine, required String productId});

  Future<String> crateApiApinRestartBrowserService(
      {required PriceEngine engine});

  Future<void> crateApiApinRestoreFromBackup(
      {required PriceEngine engine,
      required String backupPath,
      required bool replaceExisting});

  Future<void> crateApiApinShutdownPriceEngine({required PriceEngine engine});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BrowserEngine;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BrowserEngine;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BrowserEnginePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BrowserServiceManager;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BrowserServiceManager;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BrowserServiceManagerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Database;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Database;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DatabasePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PriceEngine;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PriceEngine;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PriceEnginePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProductDetails;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProductDetails;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProductDetailsPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Value;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Value;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ValuePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<BrowserEngineStatus>
      crateApiScraperEngineBrowserEngineCheckServiceStatus(
          {required BrowserEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_browser_engine_status,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiScraperEngineBrowserEngineCheckServiceStatusConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiScraperEngineBrowserEngineCheckServiceStatusConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserEngine_check_service_status",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiScraperEngineBrowserEngineCloseCurrentTab(
      {required BrowserEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiScraperEngineBrowserEngineCloseCurrentTabConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiScraperEngineBrowserEngineCloseCurrentTabConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserEngine_close_current_tab",
            argNames: ["that"],
          );

  @override
  Future<int> crateApiScraperEngineBrowserEngineGetCurrentPort(
      {required BrowserEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiScraperEngineBrowserEngineGetCurrentPortConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiScraperEngineBrowserEngineGetCurrentPortConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserEngine_get_current_port",
            argNames: ["that"],
          );

  @override
  Future<String> crateApiScraperEngineBrowserEngineGetPageSource(
      {required BrowserEngine that, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
            that, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiScraperEngineBrowserEngineGetPageSourceConstMeta,
      argValues: [that, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiScraperEngineBrowserEngineGetPageSourceConstMeta =>
      const TaskConstMeta(
        debugName: "BrowserEngine_get_page_source",
        argNames: ["that", "url"],
      );

  @override
  Future<BrowserEngine> crateApiScraperEngineBrowserEngineNew(
      {required int port,
      required String browserPath,
      required String driverPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(port, serializer);
        sse_encode_String(browserPath, serializer);
        sse_encode_String(driverPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiScraperEngineBrowserEngineNewConstMeta,
      argValues: [port, browserPath, driverPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiScraperEngineBrowserEngineNewConstMeta =>
      const TaskConstMeta(
        debugName: "BrowserEngine_new",
        argNames: ["port", "browserPath", "driverPath"],
      );

  @override
  Future<(BrowserEngine, ServiceStatus)>
      crateApiScraperEngineBrowserEngineNewWithFallback(
          {required int initialPort,
          required String browserPath,
          required String driverPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(initialPort, serializer);
        sse_encode_String(browserPath, serializer);
        sse_encode_String(driverPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_browser_engine_service_status,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiScraperEngineBrowserEngineNewWithFallbackConstMeta,
      argValues: [initialPort, browserPath, driverPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiScraperEngineBrowserEngineNewWithFallbackConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserEngine_new_with_fallback",
            argNames: ["initialPort", "browserPath", "driverPath"],
          );

  @override
  Future<ServiceStatus> crateApiScraperEngineBrowserEngineRestartWithFallback(
      {required BrowserEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_service_status,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiScraperEngineBrowserEngineRestartWithFallbackConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiScraperEngineBrowserEngineRestartWithFallbackConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserEngine_restart_with_fallback",
            argNames: ["that"],
          );

  @override
  Future<ServiceStatus>
      crateApiBrowserServiceManagerBrowserServiceManagerCheckServiceHealth(
          {required BrowserServiceManager that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_service_status,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBrowserServiceManagerBrowserServiceManagerCheckServiceHealthConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBrowserServiceManagerBrowserServiceManagerCheckServiceHealthConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserServiceManager_check_service_health",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiBrowserServiceManagerBrowserServiceManagerFindAvailablePort(
          {required BrowserServiceManager that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiBrowserServiceManagerBrowserServiceManagerFindAvailablePortConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBrowserServiceManagerBrowserServiceManagerFindAvailablePortConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserServiceManager_find_available_port",
            argNames: ["that"],
          );

  @override
  Future<int> crateApiBrowserServiceManagerBrowserServiceManagerGetCurrentPort(
      {required BrowserServiceManager that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBrowserServiceManagerBrowserServiceManagerGetCurrentPortConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBrowserServiceManagerBrowserServiceManagerGetCurrentPortConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserServiceManager_get_current_port",
            argNames: ["that"],
          );

  @override
  Future<bool>
      crateApiBrowserServiceManagerBrowserServiceManagerIsPortAvailable(
          {required int port}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(port, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBrowserServiceManagerBrowserServiceManagerIsPortAvailableConstMeta,
      argValues: [port],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBrowserServiceManagerBrowserServiceManagerIsPortAvailableConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserServiceManager_is_port_available",
            argNames: ["port"],
          );

  @override
  Future<BrowserServiceManager>
      crateApiBrowserServiceManagerBrowserServiceManagerNew(
          {required int initialPort,
          required String driverPath,
          required String browserPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(initialPort, serializer);
        sse_encode_String(driverPath, serializer);
        sse_encode_String(browserPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBrowserServiceManagerBrowserServiceManagerNewConstMeta,
      argValues: [initialPort, driverPath, browserPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBrowserServiceManagerBrowserServiceManagerNewConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserServiceManager_new",
            argNames: ["initialPort", "driverPath", "browserPath"],
          );

  @override
  Future<ServiceStatus>
      crateApiBrowserServiceManagerBrowserServiceManagerRestartService(
          {required BrowserServiceManager that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_service_status,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiBrowserServiceManagerBrowserServiceManagerRestartServiceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBrowserServiceManagerBrowserServiceManagerRestartServiceConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserServiceManager_restart_service",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiBrowserServiceManagerBrowserServiceManagerSetPortRange(
      {required BrowserServiceManager that,
      required int minPort,
      required int maxPort}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
            that, serializer);
        sse_encode_u_16(minPort, serializer);
        sse_encode_u_16(maxPort, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBrowserServiceManagerBrowserServiceManagerSetPortRangeConstMeta,
      argValues: [that, minPort, maxPort],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBrowserServiceManagerBrowserServiceManagerSetPortRangeConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserServiceManager_set_port_range",
            argNames: ["that", "minPort", "maxPort"],
          );

  @override
  Future<ServiceStatus>
      crateApiBrowserServiceManagerBrowserServiceManagerStartService(
          {required BrowserServiceManager that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_service_status,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiBrowserServiceManagerBrowserServiceManagerStartServiceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBrowserServiceManagerBrowserServiceManagerStartServiceConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserServiceManager_start_service",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiBrowserServiceManagerBrowserServiceManagerStopService(
      {required BrowserServiceManager that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBrowserServiceManagerBrowserServiceManagerStopServiceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBrowserServiceManagerBrowserServiceManagerStopServiceConstMeta =>
          const TaskConstMeta(
            debugName: "BrowserServiceManager_stop_service",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiDatabaseDatabaseCreateBackup(
      {required Database that, required String backupPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_String(backupPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseDatabaseCreateBackupConstMeta,
      argValues: [that, backupPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseDatabaseCreateBackupConstMeta =>
      const TaskConstMeta(
        debugName: "Database_create_backup",
        argNames: ["that", "backupPath"],
      );

  @override
  Future<List<ProductRecord>> crateApiDatabaseDatabaseGetAllProductsWithHistory(
      {required Database that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_product_record,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseDatabaseGetAllProductsWithHistoryConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDatabaseDatabaseGetAllProductsWithHistoryConstMeta =>
          const TaskConstMeta(
            debugName: "Database_get_all_products_with_history",
            argNames: ["that"],
          );

  @override
  Future<ProductRecord?> crateApiDatabaseDatabaseGetProductWithHistory(
      {required Database that, required String productId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_String(productId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_product_record,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseDatabaseGetProductWithHistoryConstMeta,
      argValues: [that, productId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseDatabaseGetProductWithHistoryConstMeta =>
      const TaskConstMeta(
        debugName: "Database_get_product_with_history",
        argNames: ["that", "productId"],
      );

  @override
  Future<void> crateApiDatabaseDatabaseInsertPriceEntry(
      {required Database that, required ProductDetails details}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            details, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseDatabaseInsertPriceEntryConstMeta,
      argValues: [that, details],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseDatabaseInsertPriceEntryConstMeta =>
      const TaskConstMeta(
        debugName: "Database_insert_price_entry",
        argNames: ["that", "details"],
      );

  @override
  Future<Database> crateApiDatabaseDatabaseNew({required String dbPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseDatabaseNewConstMeta,
      argValues: [dbPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseDatabaseNewConstMeta =>
      const TaskConstMeta(
        debugName: "Database_new",
        argNames: ["dbPath"],
      );

  @override
  Future<void> crateApiDatabaseDatabaseRemoveProduct(
      {required Database that, required String productId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_String(productId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseDatabaseRemoveProductConstMeta,
      argValues: [that, productId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseDatabaseRemoveProductConstMeta =>
      const TaskConstMeta(
        debugName: "Database_remove_product",
        argNames: ["that", "productId"],
      );

  @override
  Future<void> crateApiDatabaseDatabaseRestoreFromBackup(
      {required Database that,
      required String backupPath,
      required bool replaceExisting}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_String(backupPath, serializer);
        sse_encode_bool(replaceExisting, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseDatabaseRestoreFromBackupConstMeta,
      argValues: [that, backupPath, replaceExisting],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseDatabaseRestoreFromBackupConstMeta =>
      const TaskConstMeta(
        debugName: "Database_restore_from_backup",
        argNames: ["that", "backupPath", "replaceExisting"],
      );

  @override
  Future<void> crateApiDatabaseDatabaseUpsertProduct(
      {required Database that, required ProductDetails details}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            details, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseDatabaseUpsertProductConstMeta,
      argValues: [that, details],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseDatabaseUpsertProductConstMeta =>
      const TaskConstMeta(
        debugName: "Database_upsert_product",
        argNames: ["that", "details"],
      );

  @override
  Future<PriceEngineStatus> crateApiPriceEnginePriceEngineCheckServiceStatus(
      {required PriceEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_price_engine_status,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPriceEnginePriceEngineCheckServiceStatusConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPriceEnginePriceEngineCheckServiceStatusConstMeta =>
          const TaskConstMeta(
            debugName: "PriceEngine_check_service_status",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiPriceEnginePriceEngineCreateBackup(
      {required PriceEngine that, required String backupPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            that, serializer);
        sse_encode_String(backupPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPriceEnginePriceEngineCreateBackupConstMeta,
      argValues: [that, backupPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPriceEnginePriceEngineCreateBackupConstMeta =>
      const TaskConstMeta(
        debugName: "PriceEngine_create_backup",
        argNames: ["that", "backupPath"],
      );

  @override
  Future<ProductRecord> crateApiPriceEnginePriceEngineFetchAndUpdateProduct(
      {required PriceEngine that, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            that, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_product_record,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPriceEnginePriceEngineFetchAndUpdateProductConstMeta,
      argValues: [that, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPriceEnginePriceEngineFetchAndUpdateProductConstMeta =>
          const TaskConstMeta(
            debugName: "PriceEngine_fetch_and_update_product",
            argNames: ["that", "url"],
          );

  @override
  Future<List<ProductRecord>> crateApiPriceEnginePriceEngineGetAllProductsInDb(
      {required PriceEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_product_record,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPriceEnginePriceEngineGetAllProductsInDbConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPriceEnginePriceEngineGetAllProductsInDbConstMeta =>
          const TaskConstMeta(
            debugName: "PriceEngine_get_all_products_in_db",
            argNames: ["that"],
          );

  @override
  Future<int> crateApiPriceEnginePriceEngineGetCurrentPort(
      {required PriceEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPriceEnginePriceEngineGetCurrentPortConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPriceEnginePriceEngineGetCurrentPortConstMeta =>
      const TaskConstMeta(
        debugName: "PriceEngine_get_current_port",
        argNames: ["that"],
      );

  @override
  Future<PriceEngine> crateApiPriceEnginePriceEngineNew(
      {required int port,
      required String browserPath,
      required String dbPath,
      required String driverPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(port, serializer);
        sse_encode_String(browserPath, serializer);
        sse_encode_String(dbPath, serializer);
        sse_encode_String(driverPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPriceEnginePriceEngineNewConstMeta,
      argValues: [port, browserPath, dbPath, driverPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPriceEnginePriceEngineNewConstMeta =>
      const TaskConstMeta(
        debugName: "PriceEngine_new",
        argNames: ["port", "browserPath", "dbPath", "driverPath"],
      );

  @override
  Future<void> crateApiPriceEnginePriceEngineRemoveProductById(
      {required PriceEngine that, required String productId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            that, serializer);
        sse_encode_String(productId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPriceEnginePriceEngineRemoveProductByIdConstMeta,
      argValues: [that, productId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPriceEnginePriceEngineRemoveProductByIdConstMeta =>
      const TaskConstMeta(
        debugName: "PriceEngine_remove_product_by_id",
        argNames: ["that", "productId"],
      );

  @override
  Future<ServiceStatus> crateApiPriceEnginePriceEngineRestartBrowserService(
      {required PriceEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_service_status,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPriceEnginePriceEngineRestartBrowserServiceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPriceEnginePriceEngineRestartBrowserServiceConstMeta =>
          const TaskConstMeta(
            debugName: "PriceEngine_restart_browser_service",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiPriceEnginePriceEngineRestoreFromBackup(
      {required PriceEngine that,
      required String backupPath,
      required bool replaceExisting}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            that, serializer);
        sse_encode_String(backupPath, serializer);
        sse_encode_bool(replaceExisting, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPriceEnginePriceEngineRestoreFromBackupConstMeta,
      argValues: [that, backupPath, replaceExisting],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPriceEnginePriceEngineRestoreFromBackupConstMeta =>
      const TaskConstMeta(
        debugName: "PriceEngine_restore_from_backup",
        argNames: ["that", "backupPath", "replaceExisting"],
      );

  @override
  Future<void> crateApiPriceEnginePriceEngineShutdown(
      {required PriceEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPriceEnginePriceEngineShutdownConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPriceEnginePriceEngineShutdownConstMeta =>
      const TaskConstMeta(
        debugName: "PriceEngine_shutdown",
        argNames: ["that"],
      );

  @override
  List<String> crateApiModelsProductDetailsAutoAccessorGetFeatures(
      {required ProductDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorGetFeaturesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorGetFeaturesConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_get_features",
            argNames: ["that"],
          );

  @override
  String crateApiModelsProductDetailsAutoAccessorGetId(
      {required ProductDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorGetIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiModelsProductDetailsAutoAccessorGetIdConstMeta =>
      const TaskConstMeta(
        debugName: "ProductDetails_auto_accessor_get_id",
        argNames: ["that"],
      );

  @override
  List<String> crateApiModelsProductDetailsAutoAccessorGetImages(
      {required ProductDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorGetImagesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorGetImagesConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_get_images",
            argNames: ["that"],
          );

  @override
  bool crateApiModelsProductDetailsAutoAccessorGetInStock(
      {required ProductDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorGetInStockConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorGetInStockConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_get_in_stock",
            argNames: ["that"],
          );

  @override
  int? crateApiModelsProductDetailsAutoAccessorGetPrice(
      {required ProductDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorGetPriceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorGetPriceConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_get_price",
            argNames: ["that"],
          );

  @override
  String crateApiModelsProductDetailsAutoAccessorGetRating(
      {required ProductDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorGetRatingConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorGetRatingConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_get_rating",
            argNames: ["that"],
          );

  @override
  String? crateApiModelsProductDetailsAutoAccessorGetSeller(
      {required ProductDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorGetSellerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorGetSellerConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_get_seller",
            argNames: ["that"],
          );

  @override
  String crateApiModelsProductDetailsAutoAccessorGetSite(
      {required ProductDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorGetSiteConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiModelsProductDetailsAutoAccessorGetSiteConstMeta =>
      const TaskConstMeta(
        debugName: "ProductDetails_auto_accessor_get_site",
        argNames: ["that"],
      );

  @override
  Value crateApiModelsProductDetailsAutoAccessorGetSpecifications(
      {required ProductDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiModelsProductDetailsAutoAccessorGetSpecificationsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorGetSpecificationsConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_get_specifications",
            argNames: ["that"],
          );

  @override
  String crateApiModelsProductDetailsAutoAccessorGetTitle(
      {required ProductDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorGetTitleConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorGetTitleConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_get_title",
            argNames: ["that"],
          );

  @override
  String crateApiModelsProductDetailsAutoAccessorGetUrl(
      {required ProductDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorGetUrlConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiModelsProductDetailsAutoAccessorGetUrlConstMeta =>
      const TaskConstMeta(
        debugName: "ProductDetails_auto_accessor_get_url",
        argNames: ["that"],
      );

  @override
  void crateApiModelsProductDetailsAutoAccessorSetFeatures(
      {required ProductDetails that, required List<String> features}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        sse_encode_list_String(features, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorSetFeaturesConstMeta,
      argValues: [that, features],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorSetFeaturesConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_set_features",
            argNames: ["that", "features"],
          );

  @override
  void crateApiModelsProductDetailsAutoAccessorSetId(
      {required ProductDetails that, required String id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        sse_encode_String(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorSetIdConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiModelsProductDetailsAutoAccessorSetIdConstMeta =>
      const TaskConstMeta(
        debugName: "ProductDetails_auto_accessor_set_id",
        argNames: ["that", "id"],
      );

  @override
  void crateApiModelsProductDetailsAutoAccessorSetImages(
      {required ProductDetails that, required List<String> images}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        sse_encode_list_String(images, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorSetImagesConstMeta,
      argValues: [that, images],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorSetImagesConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_set_images",
            argNames: ["that", "images"],
          );

  @override
  void crateApiModelsProductDetailsAutoAccessorSetInStock(
      {required ProductDetails that, required bool inStock}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        sse_encode_bool(inStock, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorSetInStockConstMeta,
      argValues: [that, inStock],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorSetInStockConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_set_in_stock",
            argNames: ["that", "inStock"],
          );

  @override
  void crateApiModelsProductDetailsAutoAccessorSetPrice(
      {required ProductDetails that, int? price}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        sse_encode_opt_box_autoadd_i_32(price, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorSetPriceConstMeta,
      argValues: [that, price],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorSetPriceConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_set_price",
            argNames: ["that", "price"],
          );

  @override
  void crateApiModelsProductDetailsAutoAccessorSetRating(
      {required ProductDetails that, required String rating}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        sse_encode_String(rating, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorSetRatingConstMeta,
      argValues: [that, rating],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorSetRatingConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_set_rating",
            argNames: ["that", "rating"],
          );

  @override
  void crateApiModelsProductDetailsAutoAccessorSetSeller(
      {required ProductDetails that, String? seller}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        sse_encode_opt_String(seller, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorSetSellerConstMeta,
      argValues: [that, seller],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorSetSellerConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_set_seller",
            argNames: ["that", "seller"],
          );

  @override
  void crateApiModelsProductDetailsAutoAccessorSetSite(
      {required ProductDetails that, required String site}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        sse_encode_String(site, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorSetSiteConstMeta,
      argValues: [that, site],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiModelsProductDetailsAutoAccessorSetSiteConstMeta =>
      const TaskConstMeta(
        debugName: "ProductDetails_auto_accessor_set_site",
        argNames: ["that", "site"],
      );

  @override
  void crateApiModelsProductDetailsAutoAccessorSetSpecifications(
      {required ProductDetails that, required Value specifications}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            specifications, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiModelsProductDetailsAutoAccessorSetSpecificationsConstMeta,
      argValues: [that, specifications],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorSetSpecificationsConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_set_specifications",
            argNames: ["that", "specifications"],
          );

  @override
  void crateApiModelsProductDetailsAutoAccessorSetTitle(
      {required ProductDetails that, required String title}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        sse_encode_String(title, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorSetTitleConstMeta,
      argValues: [that, title],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsProductDetailsAutoAccessorSetTitleConstMeta =>
          const TaskConstMeta(
            debugName: "ProductDetails_auto_accessor_set_title",
            argNames: ["that", "title"],
          );

  @override
  void crateApiModelsProductDetailsAutoAccessorSetUrl(
      {required ProductDetails that, required String url}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
            that, serializer);
        sse_encode_String(url, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsProductDetailsAutoAccessorSetUrlConstMeta,
      argValues: [that, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiModelsProductDetailsAutoAccessorSetUrlConstMeta =>
      const TaskConstMeta(
        debugName: "ProductDetails_auto_accessor_set_url",
        argNames: ["that", "url"],
      );

  @override
  Future<PriceEngineStatus> crateApiApinCheckServiceStatus(
      {required PriceEngine engine}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            engine, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 57, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_price_engine_status,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApinCheckServiceStatusConstMeta,
      argValues: [engine],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApinCheckServiceStatusConstMeta =>
      const TaskConstMeta(
        debugName: "check_service_status",
        argNames: ["engine"],
      );

  @override
  Future<void> crateApiApinCreateBackup(
      {required PriceEngine engine, required String backupPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            engine, serializer);
        sse_encode_String(backupPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 58, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApinCreateBackupConstMeta,
      argValues: [engine, backupPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApinCreateBackupConstMeta => const TaskConstMeta(
        debugName: "create_backup",
        argNames: ["engine", "backupPath"],
      );

  @override
  Future<ProductDetails> crateApiAmazonParserExtractDetails(
      {required String htmlSource, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(htmlSource, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 59, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAmazonParserExtractDetailsConstMeta,
      argValues: [htmlSource, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAmazonParserExtractDetailsConstMeta =>
      const TaskConstMeta(
        debugName: "extract_details",
        argNames: ["htmlSource", "url"],
      );

  @override
  Future<ProductDetails> crateApiFlipkartParserExtractDetails(
      {required String htmlSource, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(htmlSource, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 60, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiFlipkartParserExtractDetailsConstMeta,
      argValues: [htmlSource, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFlipkartParserExtractDetailsConstMeta =>
      const TaskConstMeta(
        debugName: "extract_details",
        argNames: ["htmlSource", "url"],
      );

  @override
  Future<ProductRecord> crateApiApinFetchAndUpdateProduct(
      {required PriceEngine engine, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            engine, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 61, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_product_record,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApinFetchAndUpdateProductConstMeta,
      argValues: [engine, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApinFetchAndUpdateProductConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_and_update_product",
        argNames: ["engine", "url"],
      );

  @override
  Future<List<ProductRecord>> crateApiApinGetAllProductsInDb(
      {required PriceEngine engine}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            engine, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 62, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_product_record,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApinGetAllProductsInDbConstMeta,
      argValues: [engine],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApinGetAllProductsInDbConstMeta =>
      const TaskConstMeta(
        debugName: "get_all_products_in_db",
        argNames: ["engine"],
      );

  @override
  Future<int> crateApiApinGetCurrentPort({required PriceEngine engine}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            engine, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 63, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApinGetCurrentPortConstMeta,
      argValues: [engine],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApinGetCurrentPortConstMeta => const TaskConstMeta(
        debugName: "get_current_port",
        argNames: ["engine"],
      );

  @override
  Future<PriceEngine> crateApiApinGetPriceEngine(
      {required int port,
      required String browserPath,
      required String dbPath,
      required String driverPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(port, serializer);
        sse_encode_String(browserPath, serializer);
        sse_encode_String(dbPath, serializer);
        sse_encode_String(driverPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 64, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApinGetPriceEngineConstMeta,
      argValues: [port, browserPath, dbPath, driverPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApinGetPriceEngineConstMeta => const TaskConstMeta(
        debugName: "get_price_engine",
        argNames: ["port", "browserPath", "dbPath", "driverPath"],
      );

  @override
  Future<void> crateApiApinRemoveProductById(
      {required PriceEngine engine, required String productId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            engine, serializer);
        sse_encode_String(productId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 65, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApinRemoveProductByIdConstMeta,
      argValues: [engine, productId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApinRemoveProductByIdConstMeta =>
      const TaskConstMeta(
        debugName: "remove_product_by_id",
        argNames: ["engine", "productId"],
      );

  @override
  Future<String> crateApiApinRestartBrowserService(
      {required PriceEngine engine}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            engine, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 66, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApinRestartBrowserServiceConstMeta,
      argValues: [engine],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApinRestartBrowserServiceConstMeta =>
      const TaskConstMeta(
        debugName: "restart_browser_service",
        argNames: ["engine"],
      );

  @override
  Future<void> crateApiApinRestoreFromBackup(
      {required PriceEngine engine,
      required String backupPath,
      required bool replaceExisting}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            engine, serializer);
        sse_encode_String(backupPath, serializer);
        sse_encode_bool(replaceExisting, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 67, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApinRestoreFromBackupConstMeta,
      argValues: [engine, backupPath, replaceExisting],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApinRestoreFromBackupConstMeta =>
      const TaskConstMeta(
        debugName: "restore_from_backup",
        argNames: ["engine", "backupPath", "replaceExisting"],
      );

  @override
  Future<void> crateApiApinShutdownPriceEngine({required PriceEngine engine}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
            engine, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 68, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApinShutdownPriceEngineConstMeta,
      argValues: [engine],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApinShutdownPriceEngineConstMeta =>
      const TaskConstMeta(
        debugName: "shutdown_price_engine",
        argNames: ["engine"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BrowserEngine => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BrowserEngine => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BrowserServiceManager => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BrowserServiceManager => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Database => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Database => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PriceEngine => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PriceEngine => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProductDetails => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProductDetails => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Value =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Value =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  BrowserEngine
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowserEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BrowserServiceManager
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowserServiceManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Database
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PriceEngine
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PriceEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProductDetails
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProductDetailsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Value
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ValueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BrowserEngine
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowserEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BrowserServiceManager
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowserServiceManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PriceEngine
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PriceEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProductDetails
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProductDetailsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BrowserEngine
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowserEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BrowserServiceManager
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowserServiceManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Database
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PriceEngine
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PriceEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProductDetails
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProductDetailsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BrowserEngine
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowserEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BrowserServiceManager
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowserServiceManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Database
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PriceEngine
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PriceEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProductDetails
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProductDetailsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Value
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ValueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  ProductRecord dco_decode_box_autoadd_product_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_product_record(raw);
  }

  @protected
  BrowserEngineStatus dco_decode_browser_engine_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BrowserEngineStatus(
      isRunning: dco_decode_bool(arr[0]),
      currentPort: dco_decode_u_16(arr[1]),
      message: dco_decode_String(arr[2]),
      requiresRestart: dco_decode_bool(arr[3]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<PriceEntry> dco_decode_list_price_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_price_entry).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<ProductRecord> dco_decode_list_product_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_product_record).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_32(raw);
  }

  @protected
  ProductRecord? dco_decode_opt_box_autoadd_product_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_product_record(raw);
  }

  @protected
  PriceEngineStatus dco_decode_price_engine_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return PriceEngineStatus(
      isHealthy: dco_decode_bool(arr[0]),
      currentPort: dco_decode_u_16(arr[1]),
      message: dco_decode_String(arr[2]),
      lastCheck: dco_decode_String(arr[3]),
    );
  }

  @protected
  PriceEntry dco_decode_price_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PriceEntry(
      price: dco_decode_i_32(arr[0]),
      inStock: dco_decode_bool(arr[1]),
      timestamp: dco_decode_String(arr[2]),
    );
  }

  @protected
  ProductRecord dco_decode_product_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return ProductRecord(
      id: dco_decode_String(arr[0]),
      site: dco_decode_String(arr[1]),
      url: dco_decode_String(arr[2]),
      title: dco_decode_String(arr[3]),
      seller: dco_decode_opt_String(arr[4]),
      images: dco_decode_list_String(arr[5]),
      specifications: dco_decode_String(arr[6]),
      features: dco_decode_list_String(arr[7]),
      priceHistory: dco_decode_list_price_entry(arr[8]),
    );
  }

  @protected
  (
    BrowserEngine,
    ServiceStatus
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_browser_engine_service_status(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          arr[0]),
      dco_decode_service_status(arr[1]),
    );
  }

  @protected
  ServiceStatus dco_decode_service_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ServiceStatus(
      isHealthy: dco_decode_bool(arr[0]),
      port: dco_decode_u_16(arr[1]),
      errorMessage: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  BrowserEngine
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BrowserEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BrowserServiceManager
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BrowserServiceManagerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Database
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PriceEngine
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PriceEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProductDetails
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProductDetailsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Value
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ValueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BrowserEngine
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BrowserEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BrowserServiceManager
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BrowserServiceManagerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PriceEngine
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PriceEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProductDetails
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProductDetailsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BrowserEngine
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BrowserEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BrowserServiceManager
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BrowserServiceManagerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Database
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PriceEngine
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PriceEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProductDetails
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProductDetailsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BrowserEngine
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BrowserEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BrowserServiceManager
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BrowserServiceManagerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Database
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PriceEngine
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PriceEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProductDetails
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProductDetailsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Value
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ValueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_32(deserializer));
  }

  @protected
  ProductRecord sse_decode_box_autoadd_product_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_product_record(deserializer));
  }

  @protected
  BrowserEngineStatus sse_decode_browser_engine_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_isRunning = sse_decode_bool(deserializer);
    var var_currentPort = sse_decode_u_16(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_requiresRestart = sse_decode_bool(deserializer);
    return BrowserEngineStatus(
        isRunning: var_isRunning,
        currentPort: var_currentPort,
        message: var_message,
        requiresRestart: var_requiresRestart);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<PriceEntry> sse_decode_list_price_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PriceEntry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_price_entry(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<ProductRecord> sse_decode_list_product_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProductRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_product_record(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProductRecord? sse_decode_opt_box_autoadd_product_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_product_record(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PriceEngineStatus sse_decode_price_engine_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_isHealthy = sse_decode_bool(deserializer);
    var var_currentPort = sse_decode_u_16(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_lastCheck = sse_decode_String(deserializer);
    return PriceEngineStatus(
        isHealthy: var_isHealthy,
        currentPort: var_currentPort,
        message: var_message,
        lastCheck: var_lastCheck);
  }

  @protected
  PriceEntry sse_decode_price_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_price = sse_decode_i_32(deserializer);
    var var_inStock = sse_decode_bool(deserializer);
    var var_timestamp = sse_decode_String(deserializer);
    return PriceEntry(
        price: var_price, inStock: var_inStock, timestamp: var_timestamp);
  }

  @protected
  ProductRecord sse_decode_product_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_site = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_seller = sse_decode_opt_String(deserializer);
    var var_images = sse_decode_list_String(deserializer);
    var var_specifications = sse_decode_String(deserializer);
    var var_features = sse_decode_list_String(deserializer);
    var var_priceHistory = sse_decode_list_price_entry(deserializer);
    return ProductRecord(
        id: var_id,
        site: var_site,
        url: var_url,
        title: var_title,
        seller: var_seller,
        images: var_images,
        specifications: var_specifications,
        features: var_features,
        priceHistory: var_priceHistory);
  }

  @protected
  (
    BrowserEngine,
    ServiceStatus
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_browser_engine_service_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
            deserializer);
    var var_field1 = sse_decode_service_status(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  ServiceStatus sse_decode_service_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_isHealthy = sse_decode_bool(deserializer);
    var var_port = sse_decode_u_16(deserializer);
    var var_errorMessage = sse_decode_opt_String(deserializer);
    return ServiceStatus(
        isHealthy: var_isHealthy,
        port: var_port,
        errorMessage: var_errorMessage);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          BrowserEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BrowserEngineImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
          BrowserServiceManager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BrowserServiceManagerImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          Database self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DatabaseImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
          PriceEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PriceEngineImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
          ProductDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProductDetailsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          Value self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ValueImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          BrowserEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BrowserEngineImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
          BrowserServiceManager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BrowserServiceManagerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
          PriceEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PriceEngineImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
          ProductDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProductDetailsImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          BrowserEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BrowserEngineImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
          BrowserServiceManager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BrowserServiceManagerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          Database self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DatabaseImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
          PriceEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PriceEngineImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
          ProductDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProductDetailsImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
          BrowserEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BrowserEngineImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserServiceManager(
          BrowserServiceManager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BrowserServiceManagerImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          Database self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DatabaseImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceEngine(
          PriceEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PriceEngineImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProductDetails(
          ProductDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProductDetailsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          Value self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ValueImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_product_record(
      ProductRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_product_record(self, serializer);
  }

  @protected
  void sse_encode_browser_engine_status(
      BrowserEngineStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.isRunning, serializer);
    sse_encode_u_16(self.currentPort, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_bool(self.requiresRestart, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_price_entry(
      List<PriceEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_price_entry(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_product_record(
      List<ProductRecord> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_product_record(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_product_record(
      ProductRecord? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_product_record(self, serializer);
    }
  }

  @protected
  void sse_encode_price_engine_status(
      PriceEngineStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.isHealthy, serializer);
    sse_encode_u_16(self.currentPort, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_String(self.lastCheck, serializer);
  }

  @protected
  void sse_encode_price_entry(PriceEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.price, serializer);
    sse_encode_bool(self.inStock, serializer);
    sse_encode_String(self.timestamp, serializer);
  }

  @protected
  void sse_encode_product_record(ProductRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.site, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_opt_String(self.seller, serializer);
    sse_encode_list_String(self.images, serializer);
    sse_encode_String(self.specifications, serializer);
    sse_encode_list_String(self.features, serializer);
    sse_encode_list_price_entry(self.priceHistory, serializer);
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_browser_engine_service_status(
          (BrowserEngine, ServiceStatus) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBrowserEngine(
        self.$1, serializer);
    sse_encode_service_status(self.$2, serializer);
  }

  @protected
  void sse_encode_service_status(ServiceStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.isHealthy, serializer);
    sse_encode_u_16(self.port, serializer);
    sse_encode_opt_String(self.errorMessage, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class BrowserEngineImpl extends RustOpaque implements BrowserEngine {
  // Not to be used by end users
  BrowserEngineImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BrowserEngineImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BrowserEngine,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BrowserEngine,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BrowserEnginePtr,
  );

  /// Checks the health of the browser service
  Future<BrowserEngineStatus> checkServiceStatus() =>
      RustLib.instance.api.crateApiScraperEngineBrowserEngineCheckServiceStatus(
        that: this,
      );

  /// Closes the currently active tab/window.
  Future<void> closeCurrentTab() =>
      RustLib.instance.api.crateApiScraperEngineBrowserEngineCloseCurrentTab(
        that: this,
      );

  /// Gets the current port being used
  Future<int> getCurrentPort() =>
      RustLib.instance.api.crateApiScraperEngineBrowserEngineGetCurrentPort(
        that: this,
      );

  /// Navigates to a URL and returns the page source with automatic retry
  Future<String> getPageSource({required String url}) => RustLib.instance.api
      .crateApiScraperEngineBrowserEngineGetPageSource(that: this, url: url);

  /// Restarts the browser service with fallback mechanisms
  Future<ServiceStatus> restartWithFallback() => RustLib.instance.api
          .crateApiScraperEngineBrowserEngineRestartWithFallback(
        that: this,
      );
}

@sealed
class BrowserServiceManagerImpl extends RustOpaque
    implements BrowserServiceManager {
  // Not to be used by end users
  BrowserServiceManagerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BrowserServiceManagerImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_BrowserServiceManager,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_BrowserServiceManager,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BrowserServiceManagerPtr,
  );

  /// Checks if the browser service is responsive at the current port
  Future<ServiceStatus> checkServiceHealth() => RustLib.instance.api
          .crateApiBrowserServiceManagerBrowserServiceManagerCheckServiceHealth(
        that: this,
      );

  /// Finds the next available port starting from the current port
  Future<int> findAvailablePort() => RustLib.instance.api
          .crateApiBrowserServiceManagerBrowserServiceManagerFindAvailablePort(
        that: this,
      );

  /// Gets the current port
  Future<int> getCurrentPort() => RustLib.instance.api
          .crateApiBrowserServiceManagerBrowserServiceManagerGetCurrentPort(
        that: this,
      );

  /// Restarts the service with fallback to new port if needed
  Future<ServiceStatus> restartService() => RustLib.instance.api
          .crateApiBrowserServiceManagerBrowserServiceManagerRestartService(
        that: this,
      );

  /// Sets a new port range
  Future<void> setPortRange({required int minPort, required int maxPort}) =>
      RustLib.instance.api
          .crateApiBrowserServiceManagerBrowserServiceManagerSetPortRange(
              that: this, minPort: minPort, maxPort: maxPort);

  /// Starts the chromedriver service on the current port
  Future<ServiceStatus> startService() => RustLib.instance.api
          .crateApiBrowserServiceManagerBrowserServiceManagerStartService(
        that: this,
      );

  /// Stops the chromedriver service
  Future<void> stopService() => RustLib.instance.api
          .crateApiBrowserServiceManagerBrowserServiceManagerStopService(
        that: this,
      );
}

@sealed
class DatabaseImpl extends RustOpaque implements Database {
  // Not to be used by end users
  DatabaseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DatabaseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Database,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Database,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DatabasePtr,
  );

  /// Creates a backup of all data in JSON format
  Future<void> createBackup({required String backupPath}) => RustLib
      .instance.api
      .crateApiDatabaseDatabaseCreateBackup(that: this, backupPath: backupPath);

  Future<List<ProductRecord>> getAllProductsWithHistory() =>
      RustLib.instance.api.crateApiDatabaseDatabaseGetAllProductsWithHistory(
        that: this,
      );

  Future<ProductRecord?> getProductWithHistory({required String productId}) =>
      RustLib.instance.api.crateApiDatabaseDatabaseGetProductWithHistory(
          that: this, productId: productId);

  Future<void> insertPriceEntry({required ProductDetails details}) => RustLib
      .instance.api
      .crateApiDatabaseDatabaseInsertPriceEntry(that: this, details: details);

  Future<void> removeProduct({required String productId}) => RustLib
      .instance.api
      .crateApiDatabaseDatabaseRemoveProduct(that: this, productId: productId);

  /// Restores data from a JSON backup file
  Future<void> restoreFromBackup(
          {required String backupPath, required bool replaceExisting}) =>
      RustLib.instance.api.crateApiDatabaseDatabaseRestoreFromBackup(
          that: this, backupPath: backupPath, replaceExisting: replaceExisting);

  /// Inserts or updates a product's static details.
  Future<void> upsertProduct({required ProductDetails details}) =>
      RustLib.instance.api
          .crateApiDatabaseDatabaseUpsertProduct(that: this, details: details);
}

@sealed
class PriceEngineImpl extends RustOpaque implements PriceEngine {
  // Not to be used by end users
  PriceEngineImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PriceEngineImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PriceEngine,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PriceEngine,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PriceEnginePtr,
  );

  /// Checks the health status of the browser service
  Future<PriceEngineStatus> checkServiceStatus() =>
      RustLib.instance.api.crateApiPriceEnginePriceEngineCheckServiceStatus(
        that: this,
      );

  /// Creates a backup of the database in JSON format
  Future<void> createBackup({required String backupPath}) =>
      RustLib.instance.api.crateApiPriceEnginePriceEngineCreateBackup(
          that: this, backupPath: backupPath);

  /// Fetches product details with automatic retry and fallback mechanisms
  Future<ProductRecord> fetchAndUpdateProduct({required String url}) =>
      RustLib.instance.api.crateApiPriceEnginePriceEngineFetchAndUpdateProduct(
          that: this, url: url);

  Future<List<ProductRecord>> getAllProductsInDb() =>
      RustLib.instance.api.crateApiPriceEnginePriceEngineGetAllProductsInDb(
        that: this,
      );

  /// Gets the current port being used by the browser service
  Future<int> getCurrentPort() =>
      RustLib.instance.api.crateApiPriceEnginePriceEngineGetCurrentPort(
        that: this,
      );

  /// Removes a product from the database by its ID.
  Future<void> removeProductById({required String productId}) =>
      RustLib.instance.api.crateApiPriceEnginePriceEngineRemoveProductById(
          that: this, productId: productId);

  /// Restarts the browser service if needed
  Future<ServiceStatus> restartBrowserService() =>
      RustLib.instance.api.crateApiPriceEnginePriceEngineRestartBrowserService(
        that: this,
      );

  /// Restores database from a JSON backup file
  Future<void> restoreFromBackup(
          {required String backupPath, required bool replaceExisting}) =>
      RustLib.instance.api.crateApiPriceEnginePriceEngineRestoreFromBackup(
          that: this, backupPath: backupPath, replaceExisting: replaceExisting);

  /// Shuts down the browser engine gracefully.
  Future<void> shutdown() =>
      RustLib.instance.api.crateApiPriceEnginePriceEngineShutdown(
        that: this,
      );
}

@sealed
class ProductDetailsImpl extends RustOpaque implements ProductDetails {
  // Not to be used by end users
  ProductDetailsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProductDetailsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ProductDetails,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ProductDetails,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ProductDetailsPtr,
  );

  List<String> get features =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorGetFeatures(
        that: this,
      );

  String get id =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorGetId(
        that: this,
      );

  List<String> get images =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorGetImages(
        that: this,
      );

  bool get inStock =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorGetInStock(
        that: this,
      );

  int? get price =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorGetPrice(
        that: this,
      );

  String get rating =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorGetRating(
        that: this,
      );

  String? get seller =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorGetSeller(
        that: this,
      );

  String get site =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorGetSite(
        that: this,
      );

  Value get specifications => RustLib.instance.api
          .crateApiModelsProductDetailsAutoAccessorGetSpecifications(
        that: this,
      );

  String get title =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorGetTitle(
        that: this,
      );

  String get url =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorGetUrl(
        that: this,
      );

  set features(List<String> features) =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorSetFeatures(
          that: this, features: features);

  set id(String id) => RustLib.instance.api
      .crateApiModelsProductDetailsAutoAccessorSetId(that: this, id: id);

  set images(List<String> images) =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorSetImages(
          that: this, images: images);

  set inStock(bool inStock) =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorSetInStock(
          that: this, inStock: inStock);

  set price(int? price) =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorSetPrice(
          that: this, price: price);

  set rating(String rating) =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorSetRating(
          that: this, rating: rating);

  set seller(String? seller) =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorSetSeller(
          that: this, seller: seller);

  set site(String site) => RustLib.instance.api
      .crateApiModelsProductDetailsAutoAccessorSetSite(that: this, site: site);

  set specifications(Value specifications) => RustLib.instance.api
      .crateApiModelsProductDetailsAutoAccessorSetSpecifications(
          that: this, specifications: specifications);

  set title(String title) =>
      RustLib.instance.api.crateApiModelsProductDetailsAutoAccessorSetTitle(
          that: this, title: title);

  set url(String url) => RustLib.instance.api
      .crateApiModelsProductDetailsAutoAccessorSetUrl(that: this, url: url);
}

@sealed
class ValueImpl extends RustOpaque implements Value {
  // Not to be used by end users
  ValueImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ValueImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Value,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Value,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ValuePtr,
  );
}
