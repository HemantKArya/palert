// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `create_webdriver_internal`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `drop`, `fmt`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BrowserServiceManager>>
abstract class BrowserServiceManager implements RustOpaqueInterface {
  /// Checks if the browser service is responsive at the current port
  Future<ServiceStatus> checkServiceHealth();

  /// Finds the next available port starting from the current port
  Future<int> findAvailablePort();

  /// Gets the current port
  Future<int> getCurrentPort();

  /// Checks if a port is available
  static Future<bool> isPortAvailable({required int port}) =>
      RustLib.instance.api
          .crateApiBrowserServiceManagerBrowserServiceManagerIsPortAvailable(
              port: port);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Creates a new service manager
  static Future<BrowserServiceManager> newInstance(
          {required int initialPort,
          required String driverPath,
          required String browserPath}) =>
      RustLib.instance.api
          .crateApiBrowserServiceManagerBrowserServiceManagerNew(
              initialPort: initialPort,
              driverPath: driverPath,
              browserPath: browserPath);

  /// Restarts the service with fallback to new port if needed
  Future<ServiceStatus> restartService();

  /// Sets a new port range
  Future<void> setPortRange({required int minPort, required int maxPort});

  /// Starts the chromedriver service on the current port
  Future<ServiceStatus> startService();

  /// Stops the chromedriver service
  Future<void> stopService();
}

/// Result of a browser service check
class ServiceStatus {
  final bool isHealthy;
  final int port;
  final String? errorMessage;

  const ServiceStatus({
    required this.isHealthy,
    required this.port,
    this.errorMessage,
  });

  @override
  int get hashCode =>
      isHealthy.hashCode ^ port.hashCode ^ errorMessage.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ServiceStatus &&
          runtimeType == other.runtimeType &&
          isHealthy == other.isHealthy &&
          port == other.port &&
          errorMessage == other.errorMessage;
}
