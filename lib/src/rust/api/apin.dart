// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'price_engine.dart';

Future<PriceEngine> getPriceEngine(
        {required int port,
        required String browserPath,
        required String dbPath,
        required String driverPath}) =>
    RustLib.instance.api.crateApiApinGetPriceEngine(
        port: port,
        browserPath: browserPath,
        dbPath: dbPath,
        driverPath: driverPath);

Future<void> shutdownPriceEngine({required PriceEngine engine}) =>
    RustLib.instance.api.crateApiApinShutdownPriceEngine(engine: engine);

Future<ProductRecord> fetchAndUpdateProduct(
        {required PriceEngine engine, required String url}) =>
    RustLib.instance.api
        .crateApiApinFetchAndUpdateProduct(engine: engine, url: url);

Future<List<ProductRecord>> getAllProductsInDb({required PriceEngine engine}) =>
    RustLib.instance.api.crateApiApinGetAllProductsInDb(engine: engine);

Future<void> removeProductById(
        {required PriceEngine engine, required String productId}) =>
    RustLib.instance.api
        .crateApiApinRemoveProductById(engine: engine, productId: productId);

Future<void> createBackup(
        {required PriceEngine engine, required String backupPath}) =>
    RustLib.instance.api
        .crateApiApinCreateBackup(engine: engine, backupPath: backupPath);

Future<void> restoreFromBackup(
        {required PriceEngine engine,
        required String backupPath,
        required bool replaceExisting}) =>
    RustLib.instance.api.crateApiApinRestoreFromBackup(
        engine: engine,
        backupPath: backupPath,
        replaceExisting: replaceExisting);

Future<PriceEngineStatus> checkServiceStatus({required PriceEngine engine}) =>
    RustLib.instance.api.crateApiApinCheckServiceStatus(engine: engine);

Future<int> getCurrentPort({required PriceEngine engine}) =>
    RustLib.instance.api.crateApiApinGetCurrentPort(engine: engine);

Future<String> restartBrowserService({required PriceEngine engine}) =>
    RustLib.instance.api.crateApiApinRestartBrowserService(engine: engine);
