// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `setup_database`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `DatabaseBackup`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Database>>
abstract class Database implements RustOpaqueInterface {
  /// Creates a backup of all data in JSON format
  Future<void> createBackup({required String backupPath});

  Future<List<ProductRecord>> getAllProductsWithHistory();

  Future<ProductRecord?> getProductWithHistory({required String productId});

  Future<void> insertPriceEntry({required ProductDetails details});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Opens a connection to the SQLite database and sets up the tables.
  static Future<Database> newInstance({required String dbPath}) =>
      RustLib.instance.api.crateApiDatabaseDatabaseNew(dbPath: dbPath);

  Future<void> removeProduct({required String productId});

  /// Restores data from a JSON backup file
  Future<void> restoreFromBackup(
      {required String backupPath, required bool replaceExisting});

  /// Inserts or updates a product's static details.
  Future<void> upsertProduct({required ProductDetails details});
}
